import { HttpMethod } from '~/enums/HttpMethod'
import type { Body_login_api_v1_auth_login__post as LoginApiArgs, UserPublic } from '~/types/api'

export function useAuthApi () {
  const {
    customFetch,
    metaInfo,
    config
  } = useCoreApi()

  const {
    COOKIE_KEY,
    setCookie,
    getCookie
  } = useCookies()

  const authUrl = computed(() => `${metaInfo.value.apiClientBaseV1}/auth`)

  function getAccessToken () {
    return getCookie(COOKIE_KEY.accessToken)
  }

  async function login (arg: LoginApiArgs) {
    const response = await customFetch<HttpMethod.POST, LoginApiArgs, UserPublic>(`${authUrl.value}/login/`, {
      method: HttpMethod.POST,
      body: arg,
      isLazy: false
    })

    if (!response.data.value?.access_token || !response.data.value.refresh_token) {
      throw new Error('レスポンスが空です。')
    }

    setCookie(COOKIE_KEY.accessToken, response.data.value.access_token, {
      maxAge: 3600,
      secure: !config.public.dev
    })

    setCookie(COOKIE_KEY.refreshToken, response.data.value.refresh_token, {
      maxAge: 3600 * 24 * 30,
      secure: !config.public.dev
    })

    return response
  }

  return {
    getAccessToken,
    login
  }
}
